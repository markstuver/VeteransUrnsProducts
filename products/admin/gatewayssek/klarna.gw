<?php
// Klarna Checkout...
$gatewayname = "Klarna";
$paymenturl = "$ashopurl/payment/klarna.php";
$paymenturl2 = "";
$postbackurl = "$ashopurl/order.php";
$visibleorderprocessing = "FALSE";
$resultpagessl = "FALSE";
$sendpayoptionid = "TRUE";
$gw_orderid = "invoice";
$gw_amount = "";
$gw_merchantid = "";
$gw_logourl = "";
$gw_vspartner = "";
$gw_pageid = "";
$gw_description = "description";
$gw_returnurl1 = "";
$gw_returnurl2 = "";
$gw_cancel = "";
$gw_basket = "products";
$gw_affiliate = "affiliate";
$gw_bgcolor = "";
$gw_bgurl = "";
$gw_firstname = "firstname";
$gw_lastname = "lastname";
$gw_address = "address";
$gw_city = "city";
$gw_zip = "zip";
$gw_state = "state";
$gw_country = "country";
$gw_email = "email";
$gw_phone = "phone";
$gw_shipfirstname = "";
$gw_shiplastname = "";
$gw_shipaddress = "";
$gw_shipcity = "";
$gw_shipzip = "";
$gw_shipstate = "";
$gw_shipcountry = "";

$gw_extrafields = "";
$testrequest = "";

$gw_parameters['merchantid'] = "true";
$gw_parameters['secret'] = "true";
$gw_parameters['transactionkey'] = "false";
$gw_parameters['logourl'] = "false";
$gw_parameters['vspartner'] = "false";
$gw_parameters['pageid'] = "false";
$gw_parameters['testmode'] = "true";
$gw_parameters['autodelivery'] = "false";
$gw_parameters['deliverpending'] = "false";
$gw_parameters['gwbgcolor'] = "false";
$gw_parameters['gwbgurl'] = "false";
$gw_parameters['paymentinfo'] = "false";
$gw_parameters['telesign'] = "false";

if ( ! function_exists('authenticate') ) {
	function authenticate($gateway_input, $securityhash, $merchant) {
		if($gateway_input['remoteorderid'] && $gateway_input['responsemsg'] == "Success" && $gateway_input['scode'] == md5($gateway_input['remoteorderid'].$securityhash)) $validate[0] = "PENDING";
		else {
			$validate[0] = "INVALID";
			$validate[1] = "SUSPECT";
		}
		return $validate;
	}
}

if ( ! function_exists('generate_snippet') ) {
	function generate_snippet($merchantid, $securitysecret, $testmode, $invoice, $cart, $customeremail, $customerzip) {
		global $ashopurl, $ashoppath;

		require_once "$ashoppath/payment/Klarna/Checkout.php";
		if ($testmode) $klarnaurl = "https://checkout.testdrive.klarna.com/checkout/orders";
		else $klarnaurl = "https://checkout.klarna.com/checkout/orders";

		Klarna_Checkout_Order::$baseUri = $klarnaurl;
		Klarna_Checkout_Order::$contentType = "application/vnd.klarna.checkout.aggregated-order-v2+json";

		$order = null;

		$connector = Klarna_Checkout_Connector::create($securitysecret);

		if (array_key_exists('klarna_checkout', $_SESSION)) {
			// Resume session
			$order = new Klarna_Checkout_Order(
				$connector,
				$_SESSION['klarna_checkout']
			);
			try {
				$order->fetch();

				// Reset cart
				$update['cart']['items'] = array();
				foreach ($cart as $item) {
					$update['cart']['items'][] = $item;
				}
				if (!empty($customeremail)) $update['shipping_address']['email'] = $customeremail;
				if (!empty($customerzip)) $update['shipping_address']['postal_code'] = $customerzip;
				$order->update($update);
			} catch (Exception $e) {
				// Reset session
				$order = null;
				unset($_SESSION['klarna_checkout']);
			}
		}

		if ($order == null) {
			// Start new session
			$create['purchase_country'] = 'SE';
			$create['purchase_currency'] = 'SEK';
			$create['locale'] = 'sv-se';
			$create['merchant']['id'] = $merchantid;
			$create['merchant']['terms_uri'] = $ashopurl."/terms.php";
			$create['merchant']['checkout_uri'] = $ashopurl."/checkout.php";
			$create['merchant']['confirmation_uri'] = $ashopurl."/payment/klarna.php".'?confirm={checkout.order.id}';
			// You can not receive push notification on non publicly available uri
			$create['merchant']['push_uri'] = $ashopurl."/payment/klarna.php" . '?push={checkout.order.id}';
			$create['merchant_reference']['orderid1'] = $invoice;

			foreach ($cart as $item) {
				$create['cart']['items'][] = $item;
			}

			$order = new Klarna_Checkout_Order($connector);
			$order->create($create);
			$order->fetch();
		}

		// Store location of checkout session
		$_SESSION['klarna_checkout'] = $sessionId = $order->getLocation();

		// Display checkout
		$snippet = $order['gui']['snippet'];
		echo $snippet;
	}
}

if ( ! function_exists('generate_confirmation') ) {
	function generate_confirmation($securitysecret, $checkoutId, $testmode) {
		global $ashopurl, $ashoppath;

		require_once "$ashoppath/payment/Klarna/Checkout.php";
		if ($testmode) $klarnaurl = "https://checkout.testdrive.klarna.com/checkout/orders";
		else $klarnaurl = "https://checkout.klarna.com/checkout/orders";

		Klarna_Checkout_Order::$contentType = "application/vnd.klarna.checkout.aggregated-order-v2+json";

		$connector = Klarna_Checkout_Connector::create($securitysecret);
		$order = new Klarna_Checkout_Order($connector, $klarnaurl."/".$checkoutId);

		$order->fetch();

		if ($order['status'] == 'checkout_incomplete') {
			header("Location: checkout.php");
			die;
		}

		$snippet = $order['gui']['snippet'];
		// DESKTOP: Width of containing block shall be at least 750px
		// MOBILE: Width of containing block shall be 100% of browser window (No
		// padding or margin)
		echo "<div>{$snippet}</div>";
	}
}

if ( ! function_exists('push_order') ) {
	function push_order($securitysecret, $checkoutId, $testmode) {
		global $ashopurl, $ashoppath;

		$orderdetails = array();

		require_once "$ashoppath/payment/Klarna/Checkout.php";
		if ($testmode) $klarnaurl = "https://checkout.testdrive.klarna.com/checkout/orders";
		else $klarnaurl = "https://checkout.klarna.com/checkout/orders";

		Klarna_Checkout_Order::$contentType = "application/vnd.klarna.checkout.aggregated-order-v2+json";

		$connector = Klarna_Checkout_Connector::create($securitysecret);
		$order = new Klarna_Checkout_Order($connector, $klarnaurl."/".$checkoutId);

		$order->fetch();

		if ($order['status'] == "checkout_complete") {
			$orderdetails["orderstatus"] = $order['status'];
			$orderdetails["orderid"] = $order['merchant_reference']['orderid1'];
			$orderdetails["firstname"] = utf8_decode($order['billing_address']['given_name']);
			$orderdetails["lastname"] = utf8_decode($order['billing_address']['family_name']);
			$orderdetails["email"] = $order['billing_address']['email'];
			$orderdetails["address"] = utf8_decode($order['billing_address']['street_address']);
			$orderdetails["city"] = utf8_decode($order['billing_address']['city']);
			$orderdetails["zip"] = $order['billing_address']['postal_code'];
			$orderdetails["state"] = "";
			$orderdetails["country"] = $order['billing_address']['country'];
			$orderdetails["phone"] = $order['billing_address']['phone'];
			$orderdetails["amount"] = $order['cart']['total_price_including_tax'];
			$orderdetails["remoteorderid"] = $order['reservation'];
			$update['status'] = 'created';
			$order->update($update);
			return $orderdetails;
		} else {
			$orderdetails["orderstatus"] = $order['status'];
			return $orderdetails;
		}
	}
}

if ( ! function_exists('process_payment') ) {
	function process_payment($user, $password, $vspartner, $cardtype, $ccnumber, $seccode, $expdate, $amount, $invoice, $firstname, $lastname, $address, $city, $zip, $state, $country, $phone, $email, $testmode, $description) {
	}
}

if ( ! function_exists('parse_response') ) {
	function parse_response($gateway_input) {
		$response['invoicenum']=$gateway_input['invoice'];
		$response['email']=$gateway_input['email'];
		$response['firstname']=$gateway_input['firstname'];
		$response['lastname']=$gateway_input['lastname'];
		$response['address']=$gateway_input['address'];
		$response['zip']=$gateway_input['zip'];
		$response['city']=$gateway_input['city'];
		$response['state']=$gateway_input['state'];
		$response['country']=$gateway_input['country'];
		$response['remoteorderid']=$gateway_input['remoteorderid'];
		$response['phone']=$gateway_input['phone'];
		$response['price']=$gateway_input['amount'];
		$response['products']=$gateway_input['products'];
		$response['description']=$gateway_input['description'];
		$response['affiliate']=$gateway_input['affiliate'];
		return $response;
	}
}
?>