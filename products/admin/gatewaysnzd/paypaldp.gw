<?php
// PayPal Pro Direct Payment...
$gatewayname = "PayPal Direct Payment";
$paymenturl = "$ashopsurl/orderform.php";
$postbackurl = "$ashopurl/order.php";
$visibleorderprocessing = "FALSE";
$resultpagessl = "TRUE";
$sendpayoptionid = "TRUE";
$gw_orderid = "invoice";
$gw_amount = "";
$gw_merchantid = "";
$gw_logourl = "";
$gw_vspartner = "";
$gw_pageid = "";
$gw_description = "description";
$gw_returnurl1 = "";
$gw_returnurl2 = "";
$gw_cancel = "";
$gw_basket = "";
$gw_affiliate = "affiliate";
$gw_bgcolor = "";
$gw_bgurl = "";
$gw_firstname = "firstname";
$gw_lastname = "lastname";
$gw_address = "address";
$gw_city = "city";
$gw_zip = "zip";
$gw_state = "state";
$gw_country = "country";
$gw_email = "email";
$gw_phone = "phone";
$gw_shipfirstname = "";
$gw_shiplastname = "";
$gw_shipaddress = "";
$gw_shipcity = "";
$gw_shipzip = "";
$gw_shipstate = "";
$gw_shipcountry = "";

$gw_extrafields = "<input type=\"hidden\" name=\"localprocessing\" value=\"TRUE\">";
$testrequest = "";
$gw_cardtypes = "
<option value=\"Visa\">VISA</option>
<option value=\"MasterCard\">MasterCard</option>
<option value=\"Amex\">American Express</option>
<option value=\"Discover\">Discover</option>";
$ccsecuritycode = "TRUE";

$gw_parameters['merchantid'] = "true";
$gw_parameters['secret'] = "true";
$gw_parameters['transactionkey'] = "false";
$gw_parameters['logourl'] = "false";
$gw_parameters['vspartner'] = "false";
$gw_parameters['pageid'] = "false";
$gw_parameters['formfields'] = "true";
$gw_parameters['testmode'] = "true";
$gw_parameters['autodelivery'] = "true";
$gw_parameters['deliverpending'] = "false";
$gw_parameters['gwbgcolor'] = "false";
$gw_parameters['gwbgurl'] = "false";
$gw_parameters['paymentinfo'] = "false";
$gw_parameters['telesign'] = "true";

if ( ! function_exists('authenticate') ) {
	function authenticate($gateway_input, $securityhash, $merchant) {
 		if(strlen($gateway_input['remoteorderid']) && $gateway_input['responsemsg'] && $gateway_input['scode'] == md5($gateway_input['remoteorderid'].$securityhash)) {
			$validate[0] = "VERIFIED";
		} else {
			$validate[0] = "INVALID";
			$validate[1] = "SUSPECT";
		}
		return $validate;
	}
}

if ( ! function_exists('process_payment') ) {
	function process_payment($user, $password, $vspartner, $cardtype, $ccnumber, $seccode, $expdate, $amount, $invoice, $firstname, $lastname, $address, $city, $zip, $state, $country, $phone, $email, $testmode, $description) {
		global $ashoppath, $countries;
		foreach($countries as $countrycode=>$thiscountry) if ($thiscountry == $country) $country = $countrycode;

		$amount = number_format($amount,2,'.','');

		$expmonth = substr($expdate, 0, 2);
		if (substr($expmonth,0,1) == "0") $expmonth = substr($expmonth,1,1);
		$expyear = substr(date("Y", time()), 0, 2).substr($expdate, 2, 2);

		chdir("$ashoppath/admin/paypal");

		require_once 'PayPal.php';
		require_once 'PayPal/Profile/Handler/Array.php';
		require_once 'PayPal/Profile/API.php';

		$certfile = "$ashoppath/admin/paypal/cert_key_pem.txt";
		$certpass = '';
		$apiusername = "$user";
		$apipassword = "$password";
		$subject = null;
		if ($testmode) $environment = 'Sandbox';
		else $environment = 'Live';
		
		$handler =& ProfileHandler_Array::getInstance(array(
			'username' => $apiusername,
			'certificateFile' => $certfile,
			'subject' => $subject,
			'environment' => $environment));
		$profile =& APIProfile::getInstance($apiusername, $handler);
		$profile->setAPIPassword($apipassword);

		$caller =& PayPal::getCallerServices($profile);

		if(PayPal::isError($caller)) {
			print "Could not create CallerServices instance: ". $caller->getMessage();
			exit;
		}

		$name =& PayPal::getType('PersonNameType');
		$name->setFirstName("$firstname");
		$name->setLastName("$lastname");

		$ppaddress =& PayPal::getType('AddressType');
		$ppaddress->setStreet1("$address");
		$ppaddress->setCityName("$city");
		$ppaddress->setStateOrProvince("$state");
		$ppaddress->setCountry("$country");
		$ppaddress->setPostalCode("$zip");

		$payer =& PayPal::getType('PayerInfoType');
		$payer->setPayer("$email");
		$payer->setPayerID("$email");
		$payer->setPayerStatus('verified');
		$payer->setPayerName($name);
		$payer->setPayerCountry('US');
		$payer->setAddress($ppaddress);

		$cc =& PayPal::getType('CreditCardDetailsType');
		$cc->setCreditCardType("$cardtype");
		$cc->setCreditCardNumber("$ccnumber");
		$cc->setCVV2("$seccode");
		$cc->setExpMonth("$expmonth");
		$cc->setExpYear("$expyear");
		$cc->setCardOwner($payer);

		$ppamount =& PayPal::getType('BasicAmountType');
		$ppamount->setval("$amount");
		$ppamount->setattr('currencyID', 'NZD');
		
		$pdt =& PayPal::getType('PaymentDetailsType');
		$pdt->setOrderTotal($ppamount);
		$pdt->setButtonSource("AShopSoftware_ShoppingCart_DP_NZ");

		$details =& PayPal::getType('DoDirectPaymentRequestDetailsType');
		$details->setPaymentAction('Sale');
		$details->setPaymentDetails($pdt);
		$details->setCreditCard($cc);
		$details->setIPAddress("{$_SERVER["REMOTE_ADDR"]}");
		$details->setMerchantSessionId("AShop$invoice");

		$ddp =& PayPal::getType('DoDirectPaymentRequestType');
		$ddp->setDoDirectPaymentRequestDetails($details);
		
		$response = $caller->DoDirectPayment($ddp);

		if(method_exists($response, "getAmount")) {
			$checkamount = $response->getAmount();
			$remoteorderid = $response->getTransactionId();
			if ($amount == $checkamount->_value && $remoteorderid) $result["RESULT"] = "success";
			else {
				$avscode = $response->getAVSCode();
				$cvv2code = $response->getCVV2Code();
				if ($avscode == "N") $result["ERROR"] = "Address verification failed!";
				else if ($cvv2code == "N") $result["ERROR"] = "CVV2 verification failed!";
				$paypalerrors = $response->getErrors();
				$paypalerror = $paypalerrors->LongMessage;
				if ($paypalerror) $result["ERROR"] = $paypalerror;
				else if (!$result["ERROR"]) $result["ERROR"] = "Communication with payment server failed!";
			}
			$result["REMOTEORDERID"] = $remoteorderid;
			$result["RESPONSEMSG"] = "Successfull PayPal Website Payments Pro Transaction";
		} else $result["ERROR"] = "Communication with payment server failed!";
		chdir("$ashoppath");
		return $result;
	}
}

if ( ! function_exists('parse_response') ) {
	function parse_response($gateway_input) {
		$response['invoicenum']=$gateway_input['invoice'];
		$response['email']=$gateway_input['email'];
		$response['firstname']=$gateway_input['firstname'];
		$response['lastname']=$gateway_input['lastname'];
		$response['address']=$gateway_input['address'];
		$response['zip']=$gateway_input['zip'];
		$response['city']=$gateway_input['city'];
		$response['state']=$gateway_input['state'];
		$response['country']=$gateway_input['country'];
		$response['remoteorderid']=$gateway_input['remoteorderid'];
		$response['phone']=$gateway_input['phone'];
		$response['price']=$gateway_input['amount'];
		$response['products']=$gateway_input['products'];
		$response['description']=$gateway_input['description'];
		$response['affiliate']=$gateway_input['affiliate'];
		return $response;
	}
}
?>